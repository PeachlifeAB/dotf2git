#!/bin/bash

LRED='\033[0;31m'
LBLUE='\033[1;34m'
LYELLOW='\033[1;33m'
LGREEN='\033[1;32m'
LGRAY='\033[1;37m'
LPURPLE='\033[1;35m'
LNOCOLOR='\033[0m'
REPO_DIR="$HOME/dotf2git"
BACKUP_DIR="$REPO_DIR/my-dot-files"
WHITELIST_FILE="$REPO_DIR/whitelist.txt"
CONFIG_FILE="$HOME/.dotf2git"
UPSTREAM_URL="git@github.com:PeachlifeAB/dotf2git.git"

echo "+-------------------- Debug Info --------------------+"
echo "REPO_DIR: ${LYELLOW}$REPO_DIR${LNOCOLOR}"
echo "BACKUP_DIR: ${LYELLOW}$BACKUP_DIR${LNOCOLOR}"
echo "+----------------------------------------------------+"

cd $REPO_DIR || { echo -e "${LRED}Failed to change directory to $REPO_DIR. Aborting.${LNOCOLOR}"; exit 1; }

if [[ ! -f $WHITELIST_FILE ]]; then
  echo -e "${LRED}Error: whitelist.txt file does not exist in $REPO_DIR. Aborting script.${LNOCOLOR}"
  exit 1
else
  echo -e "${LYELLOW}Whitelist:${LNOCOLOR}"
  cat "$WHITELIST_FILE"
  echo ""
fi

get_user_remote_url() {
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  else
    read -p "Enter your GitHub username: " GITHUB_USER_NAME
    echo "GITHUB_USER_NAME=$GITHUB_USER_NAME" > "$CONFIG_FILE"
    REPO_URL_DEFAULT="git@github.com:$GITHUB_USER_NAME/dotf2git.git"
    read -p "Press Enter to confirm the repository URL or edit it [$REPO_URL_DEFAULT]: " REPO_URL
    REPO_URL="${REPO_URL:-$REPO_URL_DEFAULT}"
    git remote remove origin 2>/dev/null
    git remote remove upstream 2>/dev/null
    git remote add origin $REPO_URL
    git remote add upstream $UPSTREAM_URL
    git push -u origin main || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; git remote -v; rm $CONFIG_FILE; exit 1; }
  fi
  ORIGIN_REPO_URL="$(git remote get-url origin)"
  echo "Using repository URL: ${LRED}$ORIGIN_REPO_URL${LNOCOLOR}"
}
get_user_remote_url

if [[ "$OSTYPE" == "darwin"* ]]; then
    HOST=$(scutil --get ComputerName)
else
    HOST=$(hostname)
fi

COMPUTER_NAME=$(echo $HOST | sed -e 's/[^a-zA-Z0-9_-]/_/g')

mkdir -p "$BACKUP_DIR" || { echo -e "${LRED}Failed to create backup directory.${LNOCOLOR}"; exit 1; }

while IFS= read -r item; do
  item=$(echo "$item" | xargs)
  if [ -e "$HOME/$item" ]; then
    echo -e "${LGREEN}Syncing $item to $BACKUP_DIR/$item${LNOCOLOR}"
    mkdir -p "$BACKUP_DIR/$(dirname "$item")"
    cp -r "$HOME/$item" "$BACKUP_DIR/$item"
  fi
done < "$WHITELIST_FILE"

echo ""
echo -e "${LGRAY}Fetching changes from origin${LNOCOLOR}"

git fetch origin || { echo -e "${LRED}Failed to fetch changes from origin.${LNOCOLOR}"; exit 1; }

if git show-ref --verify --quiet refs/heads/$COMPUTER_NAME; then
  echo -e "${LGRAY}Switching to branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout "$COMPUTER_NAME" || { echo -e "${LRED}Failed to switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
else
  echo -e "${LYELLOW}Creating and switching to new branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout -b "$COMPUTER_NAME" || { echo -e "${LRED}Failed to create and switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
fi

git add "$BACKUP_DIR"
GIT_STATUS=$(git status)
echo ""
echo -e "${LGRAY}Git status:${LNOCOLOR}"
echo "$GIT_STATUS"
echo ""

if echo "$GIT_STATUS" | grep -q "both modified"; then
  echo -e "${LRED}Conflict detected! Please resolve the conflict before committing and pushing changes.${LNOCOLOR}"
  echo -e "${LYELLOW}Use 'git mergetool' or edit the files manually to resolve the conflicts.${LNOCOLOR}"
  echo -e "${LYELLOW}After resolving the conflicts, use 'git add <file>' to mark them as resolved.${LNOCOLOR}"
  echo -e "${LYELLOW}Then, run the ~/dotf2git/backup again to commit and push the changes.${LNOCOLOR}"
  exit 1
fi

if git diff --cached --exit-code > /dev/null; then
  echo -e "${LYELLOW}No changes to commit.${LNOCOLOR}"
else
  echo -e "${LYELLOW}Files with changes${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo -e "${LBLUE}$(git diff --cached --name-only)${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo ""
  echo -e "${LYELLOW}Committing and pushing changes.${LNOCOLOR}"
  git commit -m "Updating dot files for $COMPUTER_NAME" || { echo -e "${LRED}Failed to commit changes.${LNOCOLOR}"; exit 1; }
  git push origin "$COMPUTER_NAME" || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; exit 1; }
  echo ""
  echo -e "${LGREEN}Your dot files have been updated and added to branch: ${LBLUE}$COMPUTER_NAME${LNOCOLOR}"
fi
cd $HOME
echo -e ""
echo -e "+-------------------- ${LPURPLE}Need to backup other files?${LNOCOLOR} --------------------+"
echo -e "| 1. Add file to whitelist.txt                                        |"
echo -e "| 2. Run ~/dot2git/backup to sync and commit changes                  |"
echo -e "+---------------------------------------------------------------------+"
echo -e "${LNOCOLOR}"