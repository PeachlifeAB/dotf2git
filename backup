#!/bin/bash

LRED='\033[0;31m'
LBLUE='\033[1;34m'
LYELLOW='\033[1;33m'
LGREEN='\033[1;32m'
LPURPLE='\033[1;35m'
LNOCOLOR='\033[0m'
REPO_DIR="$HOME/dotf2git"
BACKUP_DIR="$REPO_DIR/my-dot-files"
PUBWL="$REPO_DIR/src/pub"
USER_WHITELIST="$REPO_DIR/src/pubwl"
CONFIG_FILE="$HOME/.dotf2git"
UPSTREAM_URL="git@github.com:PeachlifeAB/dotf2git.git"
PWD=$(pwd)

cd $REPO_DIR || { echo -e "${LRED}Failed to change directory to $REPO_DIR. Aborting.${LNOCOLOR}"; exit 1; }

if [[ ! -f $PUBWL ]]; then
  echo -e "${LRED}Error: Public whitelist file does not exist. Aborting.${LNOCOLOR}"
  exit 1
fi

# Check if Git is installed
if ! command -v git &> /dev/null; then
  echo -e "${LRED}Error: Git is not installed. Please install Git and try again.${LNOCOLOR}"
  exit 1
fi

get_user_remote_url() {
  BACKUP_ORIGIN_URL="$(git remote get-url origin 2>/dev/null)"
  
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  else
    read -p "Enter your GitHub username: " GITHUB_USER_NAME
    if [ "$GITHUB_USER_NAME" = "PeachlifeAB" ]; then
      echo -e "${LRED}Fatal error. The username is same as upstream PeachlifeAB.${LNOCOLOR}"
      exit 1
    fi
    echo "GITHUB_USER_NAME=$GITHUB_USER_NAME" > "$CONFIG_FILE"
    USER_REPO_URL="git@github.com:$GITHUB_USER_NAME/dotf2git.git"
    read -p "Press Enter to confirm the repository URL or edit it [$USER_REPO_URL]: " REPO_URL
    REPO_URL="${REPO_URL:-$USER_REPO_URL}"
    git remote remove origin 2>/dev/null
    git remote remove upstream 2>/dev/null
    git remote add origin $REPO_URL 2>/dev/null
    git remote add upstream $UPSTREAM_URL 2>/dev/null
    git push -u origin main || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; git remote -v; rm $CONFIG_FILE; exit 1; }
  fi

  ORIGIN_REPO_URL="$(git remote get-url origin)"
  UPSTREAM_REPO_URL="$(git remote get-url upstream)"
  
  # Precaution
  if [[ "$ORIGIN_REPO_URL" == *"github.com:PeachlifeAB/dotf2git.git" ]] && [[ "$UPSTREAM_REPO_URL" == *"github.com:PeachlifeAB/dotf2git.git" ]]; then
    echo -e "${LRED}Fatal error: Running backup script with $ORIGIN_REPO_URL as origin.${LNOCOLOR}"
    git remote remove upstream 2>/dev/null
    git remote remove origin 2>/dev/null
    git remote add origin $BACKUP_ORIGIN_URL 2>/dev/null
    exit 1
  fi
}
get_user_remote_url

if [[ "$OSTYPE" == "darwin"* ]]; then
    HOST=$(scutil --get ComputerName)
else
    HOST=$(hostname)
fi

# Remove all non-alphanumeric characters except for spaces
CLEANED_HOST=$(echo $HOST | sed 's/[^a-zA-Z0-9 ]//g')

# Replace spaces with underscores
COMPUTER_NAME=$(echo $CLEANED_HOST | sed 's/ /_/g')

echo "+-------------------- Debug Info --------------------+"
echo -e "Repo DIR: ${LYELLOW}$REPO_DIR${LNOCOLOR}"
echo -e "Backup DIR: ${LYELLOW}$BACKUP_DIR${LNOCOLOR}"
echo -e "Backup origin URL: ${LYELLOW}$BACKUP_ORIGIN_URL${LNOCOLOR}"
echo -e "User repository URL: ${LYELLOW}$ORIGIN_REPO_URL${LNOCOLOR}"
echo -e "Upstream URL: ${LYELLOW}$UPSTREAM_REPO_URL${LNOCOLOR}"
echo -e "Computer name: ${LYELLOW}$COMPUTER_NAME${LNOCOLOR}"
echo "+----------------------------------------------------+"

git fetch origin || { echo -e "${LRED}Failed to fetch changes from origin.${LNOCOLOR}"; exit 1; }

if git show-ref --verify --quiet refs/heads/$COMPUTER_NAME; then
  echo -e "${LYELLOW}Switching to branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout "$COMPUTER_NAME" || { echo -e "${LRED}Failed to switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
else
  echo -e "${LYELLOW}Creating and switching to new branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout -b "$COMPUTER_NAME" || { echo -e "${LRED}Failed to create and switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
fi
if [ ! -f "$COMPUTER_NAME.whitelist" ]; then
    touch "$COMPUTER_NAME.whitelist"
    git add . 2>/dev/null && git commit -m "$COMPUTER_NAME.whitelist added"
    git push -u origin $COMPUTER_NAME
fi
if ! git diff --quiet "$COMPUTER_NAME.whitelist"; then
  git add "$COMPUTER_NAME.whitelist"
  git commit -m "$COMPUTER_NAME.whitelist updated"
  git push origin "$COMPUTER_NAME" || { echo -e "${LRED}Failed to push local changes to the remote.${LNOCOLOR}"; exit 1; }
fi
if ! git diff-index --quiet HEAD --ignore-submodules --; then
  git stash -u -q 2>/dev/null 
  git restore --source=HEAD --staged --worktree . 2>/dev/null
fi

echo -e "${LYELLOW}Updating $COMPUTER_NAME branch with latest features from the users origin/main to device branch.${LNOCOLOR}"
git merge -X theirs -m "Merging in latest features from main" origin/main 2>/dev/null

rm -rf "$BACKUP_DIR"
mkdir -p "$BACKUP_DIR" || { echo -e "${LRED}Failed to create backup directory.${LNOCOLOR}"; exit 1; }

sync_whitelist() {
  local whitelist_file=$1
  while IFS= read -r item; do
  item=$(echo "$item" | xargs)
  if [ -e "$HOME/$item" ]; then
    echo -e "${LGREEN}Syncing $item to $BACKUP_DIR/$item${LNOCOLOR}"
    mkdir -p "$BACKUP_DIR/$(dirname "$item")"
    
    if [ -d "$HOME/$item/.git" ]; then
      echo -e "Unstaging nested git repository"
      git rm --cached -r "$item"
      rsync -av --exclude='.git' "$HOME/$item/" "$BACKUP_DIR/$item/"
    else
      cp -a "$HOME/$item" "$BACKUP_DIR/$item"
    fi
  fi
  done < "$whitelist_file"
}
sync_whitelist "$PUBWL"
sync_whitelist "$COMPUTER_NAME.whitelist"

git add "$BACKUP_DIR"

if echo "$(git status)" | grep -q "both modified"; then
  echo -e "${LRED}Conflict detected! Please resolve the conflict before committing and pushing changes.${LNOCOLOR}"
  echo -e "${LYELLOW}Use 'git mergetool' or edit the files manually to resolve the conflicts.${LNOCOLOR}"
  echo -e "${LYELLOW}After resolving the conflicts, use 'git add <file>' to mark them as resolved.${LNOCOLOR}"
  echo -e "${LYELLOW}Then, run the ~/dotf2git/backup again to commit and push the changes.${LNOCOLOR}"
  exit 1
fi

if git diff --cached --exit-code > /dev/null; then
  echo -e "${LYELLOW}No changes detected since last backup.${LNOCOLOR}"
else
  echo -e "${LYELLOW}Files with changes${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo -e "${LBLUE}$(git diff --cached --name-only)${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo ""
  echo -e "${LYELLOW}Committing and pushing changes.${LNOCOLOR}"
  git commit -m "Updating dot files for $COMPUTER_NAME" || { echo -e "${LRED}Failed to commit changes.${LNOCOLOR}"; exit 1; }
  git push -u origin "$COMPUTER_NAME" || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; exit 1; }
  echo ""
  echo -e "${LGREEN}Your dot files have been updated and added to branch: ${LBLUE}$COMPUTER_NAME${LNOCOLOR}"
fi

cd "$PWD"
echo -e ""
echo -e "+-------------------- ${LPURPLE}Need to backup other files?${LNOCOLOR} --------------------+"
echo -e "| 1. Add files or folder, one per line to $COMPUTER_NAME.whitelist     |"
echo -e "| 2. Run ~/dotf2git/backup to sync and commit changes                  |"
echo -e "+---------------------------------------------------------------------+"
echo -e "${LNOCOLOR}"
