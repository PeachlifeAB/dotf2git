#!/bin/bash

LRED='\033[0;31m'
LBLUE='\033[1;34m'
LYELLOW='\033[1;33m'
LGREEN='\033[1;32m'
LGRAY='\033[1;37m'
LPURPLE='\033[1;35m'
LNOCOLOR='\033[0m'
REPO_DIR="$HOME/dotf2git"
BACKUP_DIR="$REPO_DIR/my-dot-files"
WHITELIST_FILE="$REPO_DIR/whitelist.txt"
CONFIG_FILE="$HOME/.dotf2git"
UPSTREAM_URL="git@github.com:PeachlifeAB/dotf2git.git"

cd $REPO_DIR || { echo -e "${LRED}Failed to change directory to $REPO_DIR. Aborting.${LNOCOLOR}"; exit 1; }

if [[ ! -f $WHITELIST_FILE ]]; then
  echo -e "${LRED}Error: whitelist.txt file does not exist in $REPO_DIR. Aborting script.${LNOCOLOR}"
  exit 1
else
  echo -e "${LYELLOW}Whitelist:${LNOCOLOR}"
  cat "$WHITELIST_FILE"
  echo ""
fi

# Check if Git is installed
if ! command -v git &> /dev/null; then
  echo -e "${LRED}Error: Git is not installed. Please install Git and try again.${LNOCOLOR}"
  exit 1
fi

get_user_remote_url() {
  BACKUP_ORIGIN_URL="$(git remote get-url origin 2>/dev/null)"
  
  if [ -f "$CONFIG_FILE" ]; then
    source "$CONFIG_FILE"
  else
    read -p "Enter your GitHub username: " GITHUB_USER_NAME
    if [ "$GITHUB_USER_NAME" = "PeachlifeAB" ]; then
      echo -e "${LRED}Fatal error. The username is same as upstream PeachlifeAB.${LNOCOLOR}"
      exit 1
    fi
    echo "GITHUB_USER_NAME=$GITHUB_USER_NAME" > "$CONFIG_FILE"
    USER_REPO_URL="git@github.com:$GITHUB_USER_NAME/dotf2git.git"
    read -p "Press Enter to confirm the repository URL or edit it [$USER_REPO_URL]: " REPO_URL
    REPO_URL="${REPO_URL:-$USER_REPO_URL}"
    git remote remove origin 2>/dev/null
    git remote remove upstream 2>/dev/null
    git remote add origin $REPO_URL
    git remote add upstream $UPSTREAM_URL

    git push -u origin main || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; git remote -v; rm $CONFIG_FILE; exit 1; }
  fi

  ORIGIN_REPO_URL="$(git remote get-url origin)"
  UPSTREAM_REPO_URL="$(git remote get-url upstream)"
  
  # Precaution
  if [[ "$ORIGIN_REPO_URL" == *"github.com:PeachlifeAB/dotf2git.git" ]] && [[ "$UPSTREAM_REPO_URL" == *"github.com:PeachlifeAB/dotf2git.git" ]]; then
    echo -e "${LRED}Fatal error: Running backup script with $ORIGIN_REPO_URL as origin.${LNOCOLOR}"
    git remote remove upstream 2>/dev/null
    git remote remove origin 2>/dev/null
    git remote add origin $BACKUP_ORIGIN_URL 2>/dev/null
    exit 1
  fi
}
get_user_remote_url

if [[ "$OSTYPE" == "darwin"* ]]; then
    HOST=$(scutil --get ComputerName)
else
    HOST=$(hostname)
fi

# Remove all non-alphanumeric characters except for spaces
CLEANED_HOST=$(echo $HOST | sed 's/[^a-zA-Z0-9 ]//g')

# Replace spaces with underscores
COMPUTER_NAME=$(echo $CLEANED_HOST | sed 's/ /_/g')

echo "+-------------------- Debug Info --------------------+"
echo -e "Repo DIR: ${LYELLOW}$REPO_DIR${LNOCOLOR}"
echo -e "Backup DIR: ${LYELLOW}$BACKUP_DIR${LNOCOLOR}"
echo -e "Backup origin URL: ${LYELLOW}$BACKUP_ORIGIN_URL${LNOCOLOR}"
echo -e "User repository URL: ${LYELLOW}$ORIGIN_REPO_URL${LNOCOLOR}"
echo -e "Upstream URL: ${LYELLOW}$UPSTREAM_REPO_URL${LNOCOLOR}"
echo -e "Computer name: ${LYELLOW}$COMPUTER_NAME${LNOCOLOR}"
echo "+----------------------------------------------------+"

echo ""
echo -e "${LGRAY}Fetching changes from origin${LNOCOLOR}"

git fetch origin || { echo -e "${LRED}Failed to fetch changes from origin.${LNOCOLOR}"; exit 1; }

WHITELIST_STASH_ID=$(git stash push -m "Stashing changes to whitelist.txt" "$WHITELIST_FILE" | shasum | awk '{print $1}')
echo "Stashed changes with ID: $WHITELIST_STASH_ID"

OTHER_STASH_ID=$(git stash push -m "Stashing other local changes" | shasum | awk '{print $1}')
echo "Stashed other local changes with ID: $OTHER_STASH_ID"

if git show-ref --verify --quiet refs/heads/$COMPUTER_NAME; then
  echo -e "${LGRAY}Switching to branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout "$COMPUTER_NAME" || { echo -e "${LRED}Failed to switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
else
  echo -e "${LYELLOW}Creating and switching to new branch $COMPUTER_NAME${LNOCOLOR}"
  git checkout -b "$COMPUTER_NAME" || { echo -e "${LRED}Failed to create and switch to branch $COMPUTER_NAME.${LNOCOLOR}"; exit 1; }
fi

echo -e "${LYELLOW}Updating $COMPUTER_NAME branch with latest features from origin/main.${LNOCOLOR}"
git merge -X theirs -m "Merging in latest features from main" origin/main 2>/dev/null

if [ -n "$WHITELIST_STASH_ID" ]; then
  git stash apply "$WHITELIST_STASH_ID" || { echo -e "${LRED}Failed to apply stashed changes to whitelist.txt.${LNOCOLOR}"; exit 1; }
fi

rm -rf "$BACKUP_DIR"
mkdir -p "$BACKUP_DIR" || { echo -e "${LRED}Failed to create backup directory.${LNOCOLOR}"; exit 1; }

while IFS= read -r item; do
  item=$(echo "$item" | xargs)
  if [ -e "$HOME/$item" ]; then
    echo -e "${LGREEN}Syncing $item to $BACKUP_DIR/$item${LNOCOLOR}"
    mkdir -p "$BACKUP_DIR/$(dirname "$item")"
    
    if [ -d "$HOME/$item/.git" ]; then
      rsync -av --exclude='.git' "$HOME/$item/" "$BACKUP_DIR/$item/"
    else
      cp -a "$HOME/$item" "$BACKUP_DIR/$item"
    fi
  fi
done < "$WHITELIST_FILE"

git add "$BACKUP_DIR"
GIT_STATUS=$(git status)
echo ""
echo -e "${LGRAY}Git status:${LNOCOLOR}"
echo "$GIT_STATUS"
echo ""

if echo "$GIT_STATUS" | grep -q "both modified"; then
  echo -e "${LRED}Conflict detected! Please resolve the conflict before committing and pushing changes.${LNOCOLOR}"
  echo -e "${LYELLOW}Use 'git mergetool' or edit the files manually to resolve the conflicts.${LNOCOLOR}"
  echo -e "${LYELLOW}After resolving the conflicts, use 'git add <file>' to mark them as resolved.${LNOCOLOR}"
  echo -e "${LYELLOW}Then, run the ~/dotf2git/backup again to commit and push the changes.${LNOCOLOR}"
  exit 1
fi

if git diff --cached --exit-code > /dev/null; then
  echo -e "${LYELLOW}No changes to commit.${LNOCOLOR}"
else
  echo -e "${LYELLOW}Files with changes${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo -e "${LBLUE}$(git diff --cached --name-only)${LNOCOLOR}"
  echo -e "${LYELLOW}-----------------------------------------${LNOCOLOR}"
  echo ""
  echo -e "${LYELLOW}Committing and pushing changes.${LNOCOLOR}"
  git commit -m "Updating dot files for $COMPUTER_NAME" || { echo -e "${LRED}Failed to commit changes.${LNOCOLOR}"; exit 1; }
  git push origin "$COMPUTER_NAME" || { echo -e "${LRED}Failed to push changes.${LNOCOLOR}"; exit 1; }
  echo ""
  echo -e "${LGREEN}Your dot files have been updated and added to branch: ${LBLUE}$COMPUTER_NAME${LNOCOLOR}"
fi

if [ -n "$OTHER_STASH_ID" ]; then
  read -p "Do you want to apply the stashed local changes (other than whitelist.txt)? (y/n): " APPLY_STASH
  if [ "$APPLY_STASH" == "y" ] || [ "$APPLY_STASH" == "Y" ]; then
    git stash apply "$OTHER_STASH_ID" || { echo -e "${LRED}Failed to apply other stashed changes.${LNOCOLOR}"; exit 1; }
    echo -e "${LYELLOW}Applied stashed local changes.${LNOCOLOR}"
  else
    echo -e "${LYELLOW}Skipped applying stashed local changes.${LNOCOLOR}"
  fi
fi

cd $HOME
echo -e ""
echo -e "+-------------------- ${LPURPLE}Need to backup other files?${LNOCOLOR} --------------------+"
echo -e "| 1. Add file to whitelist.txt                                        |"
echo -e "| 2. Run ~/dotf2git/backup to sync and commit changes                  |"
echo -e "+---------------------------------------------------------------------+"
echo -e "${LNOCOLOR}"
